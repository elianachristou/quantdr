is.character('cv')
devtools::load_all()
llqr(x, y, tau = tau, method = 2)
devtools::load_all()
llqr(x, y, tau = tau, method = 2)
llqr(x, y, tau = tau, method = a)
devtools::load_all()
llqr(x, y, tau = tau, method = 2)
llqr(x, y, tau = tau, method = a)
llqr(x, y, tau = tau, method = 'a')
test_that("the function gives an error message when method is not one of
rule or CV", {
set.seed(1234)
n <- 100; p <- 2
x <- matrix(rnorm(n * p), n, p); error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
expect_error(llqr(x, y, tau = tau, method = 2), )
expect_error(llqr(x, y, tau = tau, method = a), )
expect_error(llqr(x, y, tau = tau, method = 'a'), )
})
?llqr
?cqs
devtools::load_all()
vignette(quantreg)
bic_d <- function(lambdas, n) {
lambdas <- sort(lambdas, decreasing = TRUE)
p <- length(lambdas)
gn <- as.null(p)
for (i in 1:length(lambdas)) {
gn[i] <- n * sum((lambdas[1:i])^2) / sum((lambdas)^2) -
2 * (n^ (3 / 4) / p) * i * (i + 1) / 2
}
which(gn == max(gn))
}
bic_d(c(1,2,3,4), 100)
bic_d(c(1,1,3,4), 100)
bic_d(c(1,1,1,4), 100)
bic_d(c(1,1,1,1), 100)
bic_d(c(1,1,4,5), 100)
devtools::load_all()
devtools::load_all()
set.seed(1234)
n <- 100
p <- 10
tau <- 0.5
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
out <- cqs(x, y, tau)
bic_d(out$qvalues, n)
test_that("the BIC criterion correctly estimates the dimension", {
set.seed(1234)
n <- 100
p <- 10
tau <- 0.5
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
out <- cqs(x, y, tau)
expect_equal(bic_d(out$qvalues, n), 1)
})
set.seed(1234)
n <- 100
p <- 10
tau <- 0.5
x <- matrix(rnorm(n * p), n, p); error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
out <- cqs(x, y, tau)
bic_d(out$qvalues, n)
devtools::load_all()
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y[1:(n / 2)], tau = tau)
devtools::load_all()
cqs(x, y[1:(n / 2)], tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- -0.1
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
y[1] <- 0 / 0
tau <- 0.5
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- c(0.2, 0.5)
cqs(x, y, tau = tau)
set.seed(1234)
n <- 20
p <- 40
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p); error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
cqs(x, y, tau = tau, dtau = -1)
cqs(x, y, tau = tau, dtau = -1.5)
cqs(x, y, tau = tau, dtau = 1)$dtau
cqs(x, y, tau = tau, dtau = 2.5)
cqs(x, y, tau = tau, dtau = 20)
set.seed(1234)
n <- 100
p <- 1
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
devtools::load_all()
# estimate the directions of a multi-index model
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- exp(x[, 1]) + x[, 2] + error
tau <- 0.5
cqs(x, y, tau)$qvectors[, 1:2]
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
out <- cqs(x, y, tau, dtau = 1)
out
# without specifying dtau
out <- cqs(x, y, tau)
out
out$qvectors[, 1:out$dtau]
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p); error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
cqs(x, y, tau = tau, dtau = -1)
y=matrix(rnorm(100), 2, 50)
y
y=matrix(rnorm(100), 50, 2)
dim(y)[2]
devtools::load_all()
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
devtools::load_all()
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y[1:(n / 2)], tau = tau)
devtools::load_all()
cqs(x, y[1:(n / 2)], tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- -0.1
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
y[1] <- 0 / 0
tau <- 0.5
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n); y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- c(0.2, 0.5)
cqs(x, y, tau = tau)
set.seed(1234)
n <- 20
p <- 40
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
devtools::load_all()
cqs(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p); error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
cqs(x, y, tau = tau, dtau = -1)
cqs(x, y, tau = tau, dtau = -1.5)
cqs(x, y, tau = tau, dtau = 1)$dtau
cqs(x, y, tau = tau, dtau = 2.5)
set.seed(1234)
n <- 100
p <- 1
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
cqs(x, y, tau = tau)
devtools::load_all()
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x^2 + error
tau <- 0.5
llqr(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
llqr(x, y[1:(n / 2)], tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- -0.1
llqr(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
y[1] <- 0 / 0
tau <- 0.5
llqr(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- c(0.2, 0.5)
llqr(x, y, tau = tau)
set.seed(1234)
n <- 20
p <- 40
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
llqr(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
x0 <- 1
llqr(x, y, tau = tau, x0 = x0)$ll_est
devtools::load_all()
devtools::load_all()
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- x^2 + error
tau <- 0.5
llqrcv(x, y, tau = tau)
set.seed(1234)
n <- 100
p <- 2
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- x[, 1]^2 + error
tau <- 0.5
llqrcv(x, y[1:(n / 2)], tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- -0.1
llqrcv(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
y[1] <- 0 / 0
tau <- 0.5
llqrcv(x, y, tau = tau)
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- c(0.2, 0.5)
llqrcv(x, y, tau = tau)
set.seed(1234)
n <- 20
p <- 40
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n); y <- x[, 1]^2 + error
tau <- 0.5
llqrcv(x, y, tau = tau)
devtools::load_all()
n <- 100
x <- rnorm(100)
error <- rnorm(100)
y <- x^2 + error
tau <- 0.5
llqrcv(x, y, tau = tau)
devtools::load_all()
devtools::load_all(".")
mem_used()
microbenchmark(
as.null(1000),
list(),
times = 100
)
library(microbenchmark)
microbenchmark(
as.null(1000),
list(),
times = 100
)
x <- rnorm(100)
microbenchmark(
x - x[1, 1],
x <- list(); x <- x - x[1, 1],
times = 100
)
microbenchmark(
x - x[1, 1],
x <- list()
x <- x - x[1, 1],
times = 100
)
microbenchmark(
x - x[1, 1],
{x <- list()
x <- x - x[1, 1]},
times = 100
)
microbenchmark(
x - x[1],
{x <- list()
x <- x - x[1]},
times = 100
)
x - x[1]
devtools::load_all()
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
par(mfrow=c(2, 3))
for (i in 1:length(taus)) {
plot(x, y, main = taus[i])
points(x, llqr(x, y, tau = taus[i])$ll_est, col = 'red', pch = 16)
}
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- 0.5
x0 <- 1
llqr(x, y, tau = tau, x0 = x0)
# Example 3
# estimate the function for different quantile levels
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in 1:length(taus)) {
fit <- llqr(times, accel, tau = taus[i])$ll_est
lines(times, fit, lty = i)
}
legend(38, -50, c("tau=0.1","tau=0.25","tau=0.5","tau=0.75", "tau=0.9"),
lty=1:length(taus))
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
length(times)
devtools::load_all()\
devtools::load_all()
# estimate the function for different quantile levels
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in 1:length(taus)) {
fit <- llqr(times, accel, tau = taus[i])$ll_est
lines(times, fit, lty = i)
}
legend(38, -50, c("tau=0.1","tau=0.25","tau=0.5","tau=0.75", "tau=0.9"),
lty=1:length(taus))
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
fit.alt <- llqr(x, y, tau = tau, h=1)
fit.alt
devtools::load_all()
devtools::load_all()
# Example 3
# estimate the function for different quantile levels
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in 1:length(taus)) {
fit <- llqr(times, accel, tau = taus[i])$ll_est
lines(times, fit, lty = i)
}
legend(38, -50, c("tau=0.1","tau=0.25","tau=0.5","tau=0.75", "tau=0.9"),
lty=1:length(taus))
# Example 3
# estimate the function for different quantile levels
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in 1:length(taus)) {
fit <- llqr(times, accel, tau = taus[i])$ll_est
lines(times, fit, lty = i)
}
legend(40, -50, c("tau=0.1","tau=0.25","tau=0.5","tau=0.75", "tau=0.9"),
lty=1:length(taus))
# Example 3
# estimate the function for different quantile levels
par(mfrow = c(1, 1))
data(mcycle, package = "MASS")
attach(mcycle)
plot(times, accel, xlab = "milliseconds", ylab = "acceleration")
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
for(i in 1:length(taus)) {
fit <- llqr(times, accel, tau = taus[i])$ll_est
lines(times, fit, lty = i)
}
legend(45, -50, c("tau=0.1","tau=0.25","tau=0.5","tau=0.75", "tau=0.9"),
lty=1:length(taus))
microbenchmark(
as.null(10),
list(),
times = 1
)
microbenchmark(
as.null(2),
list(),
times = 1
)
devtools::load_all()
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- x^2 + error
tau <- 0.5
llqrcv(x, y, tau = tau)
devtools::load_all()
devtools::load_all()
library(quantreg)
