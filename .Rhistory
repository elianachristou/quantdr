as.matrix(hypothesis)
}
# Project the hypothesis into the rotated Q-coordinates used by IRE
gamma <- dr.R(object) %*% gamma
# Run IRE estimation constrained to lie in the span of gamma
dr.iteration(object, object$Gz, d = d, T = gamma)
}
}
#' Print Method for IRE Objects
#'
#' Displays summary output from an IRE model object, including the fitted call
#' and large-sample marginal dimension tests for each estimated direction.
#'
#' @param x An object of class \code{"ire"}, typically produced by a function
#'     such as \code{dr.fit.ire}.
#' @param width Integer. Maximum line width when printing the call. Default is 50.
#' @param ... Further arguments passed to other print methods (ignored here).
#'
#' @method print ire
#' @exportS3Method
#' @noRd
print.ire <- function(x, width = 50, ...) {
# Print the call used to fit the model, wrapping lines at 'width' characters
fout <- deparse(x$call, width.cutoff = width)
for (f in fout) cat("\n", f)
cat("\n")
# Number of sufficient directions estimated
numdir <- length(x$result)
# Initialize tests with the independence test (for 0 directions)
tests <- x$indep.test
# Append test results for each direction
for (d in 1:numdir) {
tests <- rbind(tests, x$result[[d]]$summary)
}
# Label rows as comparisons of 0:D, 1:D, ..., D:D
rownames(tests) <- paste(0:numdir, "D vs", " > ", 0:numdir, "D", sep = "")
# Display the marginal dimension tests
cat("Large-sample Marginal Dimension Tests:\n")
print(tests)
cat("\n")
# Return the object invisibly (stadard for print methods)
invisible(x)
}
#' Summary Method for IRE Objects
#'
#' Summarizes the results from an inverse regression estimator (IRE) fit.
#' Includes information about the call, slicing, weights, estimated directions,
#' and large-sample dimension tests.
#'
#' @param object An object of class \code{"ire"} returned by \code{dr.fit.ire}.
#' @param ... Currently ignored. Included for S3 method consistency.
#'
#' @return An object of class \code{"summary.ire"} containing the fitted call,
#' method, slice information, weights, estimated directions, and test results.
#' @exportS3Method
#' @noRd
summary.ire <- function (object, ...) {
# Start with storing the original call
ans <- object[c("call")]
# Extract estimated directions and compute how many were fitted
result <- object$result
numdir <- length(result)
# Combine independence test (0D) and tests for each fitted direction
tests <- object$indep.test
for (d in 1:numdir) {
tests <- rbind(tests, result[[d]]$summary)
}
# Label rows as comparisons of 0D, 1D, ..., up to numdir D
rownames(tests) <- paste(0:numdir, "D vs", " > ", 0:numdir, "D", sep = "")
# Add additional model components to the summary output
ans$method <- object$method
ans$nslices <- object$slice.info$nslices
ans$sizes <- object$slice.info$slice.sizes
ans$weights <- dr.wts(object)
# Add result list with direction matrices replaced by actual bases
ans$result <- object$result
for (j in 1:length(ans$result)) {
ans$result[[j]]$B <- dr.basis(object,j)
}
# Add number of observations and test summary
ans$n <- object$cases
ans$test <- tests
# Set the summary class for future method dispatch
class(ans) <- "summary.ire"
ans
}
#' Print Method for Summary of IRE Objects
#'
#' Nicely formats and prints the summary information for an inverse regression
#' estimator (IRE) object, including call, method details, slice sizes,
#' large-sample dimension tests, and estimated directions.
#'
#' @param x An object of class \code{"summary.ire"}, typically from
#'     \code{summary.ire}.
#' @param digits Number of significant digits to print. Defaults to
#'     \code{max(3, getOption("digits") - 3)}.
#' @param ... Additional arguments (currently ignored).
#'
#' @return The input object \code{x}, invisibly.
#' @exportS3Method
#' @noRd
print.summary.ire <- function (x, digits = max(3, getOption("digits") - 3), ...) {
# Print the original function call that created the IRE object
cat("\nCall:\n") #S: ' ' instead of '\n'
cat(paste(deparse(x$call), sep = "\n", collapse = "\n"), "\n\n", sep = "")
# Print method name and number of slices & observations
cat("Method:\n") #S: ' ' instead of '\n'
cat(x$method, "with", x$nslices, "slices, n =", x$n)
# Indicate if weights were used
if (diff(range(x$weights)) > 0) cat(", using weights.\n") else cat(".\n")
# Show the sizes of the slices
cat("\nSlice Sizes:\n") #S: ' ' instead of '\n'
cat(x$sizes,"\n")
# Display large-sample marginal dimension tests as a matrix
cat("\nLarge-sample Marginal Dimension Tests:\n")
print(as.matrix(x$test), digits = digits)
# Print estimated directions (basic vectors) for each dimension
cat("\n")
cat("\nSolutions for various dimensions:\n")
for (d in 1:length(x$result)) {
cat("\n", paste("Dimension =", d), "\n")
print(x$result[[d]]$B, digits = digits)
}
cat("\n")
invisible(x)
}
#' Extract Orthonormal Basis for Estimated Directions (IRE)
#'
#' Returns an orthonormal basis for the estimated sufficient dimension
#' reduction directions in the original coordinate system, for inverse
#' regression estimator (IRE) objects.
#'
#' @param object An object of class \code{ire}, typically the result of a
#'    fit using IRE.
#' @param numdir Integer. Number of directions to extract. Defaults to the
#'   full number of estimated directions in the object.
#'
#' @return A matrix whose columns form an orthonormal basis for the estimated
#'   central subspace, with appropriate column and row names.
#' @noRd
dr.basis.ire <- function(object, numdir = length(object$result)) {
# Normalize and flip sign of vectors so that the first elementn is always positive
fl <- function(z) apply(z, 2, function(x) {
b <- x / sqrt(sum(x^2)) # Normalize to unit length
if (b[1] < 0) -1*b else b
})
# Transform from Q-space to original coordinate system via backsolve
ans <- fl(backsolve(dr.R(object), object$result[[numdir]]$B))
dimnames(ans) <- list(colnames(dr.x(object)),
paste("Dir", 1:dim(ans)[2], sep = ""))
ans
}
#' Project Data onto Estimated IRE Directions
#'
#' Computes the projections of the original predictors onto the estimated
#' inverse regression (IRE) directions.
#'
#' @param object An object of class \code{ire}, typically the result of a fit
#'    using IRE.
#' @param which Integer vector. Specifies which directions to return.
#'   Defaults to all estimated directions.
#' @param x Optional matrix of predictor variables. Defaults to \code{dr.x(object)}.
#'
#' @return A numeric matrix containing the projected data onto the selected
#'    directions.
#' @noRd
dr.direction.ire <- function(object, which = 1:length(object$result),
x = dr.x(object)){
# Determine how many directions are requested
d <- max(which)
# Project the centered preditors onto the estimated directions
scale(x, center = TRUE, scale = FALSE) %*% dr.basis(object, d)
}
#' Fit Partial Inverse Regression Estimator (pIRE)
#'
#' Implements the partial inverse regression estimator (pIRE), as described in
#' Wen and Cook (in press), for regressions with categorical predictors. This
#' method extends IRE to handle grouped data by estimating group-specific
#' \eqn{\zeta} matrices.
#'
#' @param object An object of class \code{dr}, containing predictor and
#'    response information.
#' @param numdir Integer. Number of sufficient directions to estimate.
#' @param nslices Number of slices used for inverse regression. Defaults to
#'    number of covariates.
#' @param slice.function A slicing function. Defaults to \code{dr.slices}.
#' @param ... Additional arguments passed to lower-level methods.
#'
#' @return An object of class \code{pire}, containing the fitted results
#'    including estimated directions, independence tests, and \eqn{\Gamma_\zeta}
#'    matrix.
#' @noRd
dr.fit.pire <- function(object, numdir = 4, nslices = NULL,
slice.function = dr.slices, ...) {
y <- dr.y(object) # Extract response
z <- dr.z(object) # Extract transformed predictors
p <- dim(z)[2] # Number of predictors
# If no group assignment is provided, assume one global group
if(is.null(object$group)) object$group <- rep(1, dim(z)[1])
group.names <- unique(as.factor(object$group)) # Get unique group labels
nw <- table(object$group) # Sample size per group
# Check that each group has enough observations to fit p-dimensional model
if (any(nw < p) ) stop("At least one group has too few cases")
# Default number of slices
h <- if (!is.null(nslices)) nslices else NCOL(z)
group.stats <- NULL
# Loop through groups and estimate group-specific zeta
for (j in 1:length(group.names)) {
name <- group.names[j]
group.sel <- object$group == name
# Compute IRE for this subgroup
ans <- dr.compute(z[group.sel, ], y[group.sel], method = "ire",
nslices = h, slice.function = slice.function,
tests = FALSE, weights = object$weights[group.sel])
# Store group-specific zeta matrix and full result
object$zeta[[j]] <- ans$zeta
group.stats[[j]] <- ans
}
object$group.stats <- group.stats
# Truncate number of directions to p-1 maximum
numdir <- min(numdir, p - 1)
# Estimate raw eigenvectors for the global SIR
object$sir.raw.evectors <- dr.compute(z, y, nslices = h,
slice.function = slice.function,
weights = object$weights)$raw.evectors
# Update class to include 'pire'
class(object) <- c("pire", "ire", "dr")
# Perform marginal test for independence (0D model)
object$indep.test <- dr.test(object, numdir = 0, ...)
# Precompute Gz matrix (same for all d>0)
Gz <- Gzcomp(object, numdir)
ans <- NULL
# Run iterative test for each direction d = 1, ..., numdir
for (d in 1:numdir) {
ans[[d]] <- dr.test(object, numdir = d, Gz, ...)
colnames(ans[[d]]$B) <- paste("Dir", 1:d, sep = "")
}
# Compute final Gz with span set to final basis
object$Gz <- Gzcomp(object, d, span = ans[[numdir]]$B)
# Return updated object with results
aa <- c(object, list(result = ans, numdir = numdir))
class(aa) <- class(object)
return(aa)
}
#' Partial IRE Optimization Iteration
#'
#' Internal iterative procedure to estimate sufficient directions for partial IRE
#' (pIRE), as proposed in Wen and Cook (in press). This function iteratively
#' updates basis matrix \code{B} and group-specific coefficient matrices \code{C}
#' to minimize a weighted residual sum of squares over all groups.
#'
#' @param object A \code{dr} object resulting from \code{dr.fit.pire}.
#' @param Gz A list of Cholesky decompositions of the group-specific
#'    \eqn{\Gamma_\zeta} matrices.
#' @param d Integer. Number of directions to estimate.
#' @param B Optional. Initial basis matrix of size p × d.
#' @param T Optional. Transformation matrix (e.g., restriction), defaults to
#'    identity.
#' @param eps Convergence threshold. Default is \code{1e-6}.
#' @param itmax Maximum number of iterations. Default is 200.
#' @param verbose Logical. If \code{TRUE}, prints iteration progress.
#'
#' @return A list with:
#'   \item{B}{Estimated basis matrix (p × d) for the central subspace.}
#'   \item{summary}{A data frame with test statistic, degrees of freedom,
#'   p-value, and number of iterations.}
#' @noRd
dr.iteration.pire <- function(object, Gz, d = 2, B = NULL, T = NULL,
eps = 1.e-6, itmax = 200, verbose = FALSE) {
# Generalized solver modeled after MASS::ginv, used to invert singular matrices
gsolve <- function(a1, a2) {
Asvd <- svd(a1)
Positive <- Asvd$d > max(sqrt(.Machine$double.eps) * Asvd$d[1], 0)
if(all(Positive)) {
Asvd$v %*% (1 / Asvd$d * t(Asvd$u)) %*% a2
} else {
Asvd$v[, Positive, drop = FALSE] %*%
((1 / Asvd$d[Positive]) * t(Asvd$u[, Positive, drop = FALSE])) %*% a2
}
}
n <- object$cases
zeta <- object$zeta
n.groups <- length(zeta) # Number of groups
p <- dim(zeta[[1]])[1] # Number of covariates (same across groups)
h1 <- 0 # Total reduced dimensions across groups
h2 <- NULL # Individual group dimennsions
# Compute h1 = total # of columns across all zeta matrices
for (j in 1:n.groups) {
h2[j] <- dim(zeta[[j]])[2]
h1 <- h1 + h2[j]
}
# Null hypothesis test only (no optimization)
if (d == 0) {
err <- 0
for (j in 1:n.groups) {
err <- err + n * sum(forwardsolve(t(Gz[[j]]), as.vector(zeta[[j]]))^2)
}
data.frame(Test = err, df = (p - d) * (h1 - d),
p.value = pchisq(err, (p - d) * (h1 - d), lower.tail = FALSE),
iter=0)
} else {
# Initialize transformation matrix T and basis matrix B
T <- if(is.null(T)) diag(rep(1, p)) else T
B <- if(is.null(B)) diag(rep(1, ncol(T)))[, 1:d, drop = FALSE] else B
# Objective function: weighted sum of squared errors across all groups
fn <- function(B, C) {
ans <- 0
for (j in 1:n.groups) {
res <- as.vector(zeta[[j]] - T %*% B %*% C[[j]])
ans <- ans + n * sum(forwardsolve(t(Gz[[j]]), res)^2)
}
ans
}
# Step 2: update C for each group given B
updateC <- function() {
C <- NULL
for (j in 1:n.groups) {
Xj <- forwardsolve(t(Gz[[j]]), kronecker(diag(rep(1, h2[j])), T %*% B))
yj <- forwardsolve(t(Gz[[j]]), as.vector(zeta[[j]]))
C[[j]] <- matrix(qr.coef(qr(Xj), yj), nrow = d)
}
C
}
# Step 3: update B given all C matrices
updateB <- function() {
for (k in 1:d) {
PBk <- qr(B[, -k]) # Projection basis excluding column k
a1 <- a2 <- 0
for (j in 1:n.groups) {
# Residual excluding k-th direction
alphak <- as.vector(zeta[[j]] - T %*% B[, -k, drop = FALSE] %*%
C[[j]][-k, ])
m1 <- forwardsolve(t(Gz[[j]]),
t(qr.resid(PBk, t(kronecker(C[[j]][k, ], T)))))
m2 <- forwardsolve(t(Gz[[j]]), alphak)
a1 <- a1 + t(m1) %*% m1
a2 <- a2 + t(m1) %*% m2
}
bk <- qr.resid(PBk, gsolve(a1, a2))
bk[is.na(bk)] <- 0  # can use any OLS estimate; eg, set NA to 0
bk <- qr.resid(PBk, bk)
B[,k] <- bk / sqrt(sum(bk^2))
}
B
}
# Initialization
C <- updateC()
err <- fn(B, C)
iter <- 0
# Main loop
repeat{
iter <- iter + 1
B <- updateB()
C <- updateC()
errold <- err
err <- fn(B, C)
if(verbose == TRUE) print(paste("Iter =", iter, "Fn =", err), quote = FALSE)
if (abs(err - errold) / errold < eps || iter > itmax ) break
}
# Final transformation
B <- T %*% B
rownames(B) <- rownames(zeta)
list(B = B,
summary = data.frame(
Test = err, df = (p - d) * (h1 - d),
p.value = pchisq(err, (p - d) * (h1 - d), lower.tail = FALSE),
iter = iter))
}
}
#' Partial IRE Coordinate Hypothesis Test
#'
#' Performs a coordinate hypothesis test for the partial inverse regression
#' estimator (pIRE), assessing whether specified linear combinations of the
#' predictors contribute to the central subspace. This is based on the methodology
#' from Wen and Cook (in press).
#'
#' @param object A \code{dr} object of class \code{"pire"}, typically produced
#'     by \code{dr.fit.pire()}.
#' @param hypothesis A matrix or a model \code{formula} specifying the linear
#'     hypothesis to test.
#' @param d Integer or \code{NULL}. If \code{NULL}, tests whether the specified
#'     directions are in the span of the central subspace. If a positive integer,
#'     compares the full model (with constraint) to the fitted model with \code{d}
#'     directions.
#' @param ... Additional arguments passed to \code{dr.iteration()} or
#'     \code{dr.joint.test()}.
#'
#' @return A data frame with:
#' \item{Test}{Test statistic.}
#' \item{df}{Degrees of freedom.}
#' \item{p.value}{P-value for the hypothesis test.}
#'
#' @noRd
dr.coordinate.test.pire <- function(object, hypothesis, d = NULL, ...) {
# Convert formula input to matrix using coord.hyp.basis
gamma <- if (inherits(hypothesis, "formula"))
coord.hyp.basis(object, hypothesis)
else as.matrix(hypothesis)
# Transform hypothesis matrix to the Q-coordinates
gamma <- dr.R(object) %*% gamma
p <- object$qr$rank # Number of predictors
r <- p - dim(gamma)[2] # Hypothesized dimension reduction
maxdir <- length(object$result) # Max number of fitted directions
n.groups <- length(object$group.stats)
h1 <- 0 # Total dimension of all zeta matrices
h2 <- NULL # Store h_j = #cols of zeta_j for each group
zeta <- object$zeta
for (j in 1:n.groups) {
h2[j] <- dim(zeta[[j]])[2]
h1 <- h1 + h2[j]
}
# Test for full null hypothesis (no d specified)
if(is.null(d)) {
# Construct orthogonal complement to gammaa
H <- qr.Q(qr(gamma), complete = TRUE)[, -(1:(p - r)), drop = FALSE]
n <- object$cases
Gz <- object$Gz
T_H <- 0
for (j in 1:n.groups) {
# Projected residuals under the null
m1 <- Gz[[j]] %*% kronecker(diag(rep(1, h2[j])), H)
m1 <- chol(t(m1) %*% m1)
T_H <- T_H + n * sum (forwardsolve(t(m1), as.vector(t(H)%*%zeta[[j]]))^2)
}
df <- r * h1 # Degrees of freedom
z <- data.frame(Test = T_H, df = df,
p.value = pchisq(T_H, df, lower.tail = FALSE))
z
} else {
# Alternative test comparing full vs restricted model
F0 <- if(maxdir >= d) object$result[[d]]$summary$Test else
dr.iteration(object, object$Gz, d = d, ...)$summary$Test
F1 <- dr.joint.test(object, hypothesis, d = d, ...)$summary$Test
data.frame(Test = F1 - F0, df = r * d,
p.value = pchisq(F1 - F0, r * d, lower.tail = FALSE))
}
}
#' Group-wise Gz Computation for Partial IRE
#'
#' Computes the Cholesky decomposition of the \eqn{\Gamma_\zeta} matrix for
#' each group in the partial IRE setting. Each group statistic is adjusted
#' using group-specific weights.
#'
#' @param object A \code{dr} object of class \code{"pire"}.
#' @param numdir Integer. Number of directions to use in the Gz computation.
#' @param span Optional matrix. Span to project slice means before computing Gz.
#'
#' @return A list of Cholesky factors, one per group, of the \eqn{\Gamma_\zeta}
#'     matrices.
#' @noRd
Gzcomp.pire <- function(object, numdir, span = NULL) {
Gz <- NULL # Initialize list to store Gz matrices per group
n.groups <- length(object$group.stats)
# Compute proportion of total weights for group 1
pw <- sum(object$group.stats[[1]]$weights) / sum(object$weights)
Gz[[1]] <- Gzcomp(object$group.stats[[1]], numdir = numdir, span = span) / sqrt(pw)
if (n.groups > 1) {
for (j in 2:n.groups) {
pw <- sum(object$group.stats[[j]]$weights) / sum(object$weights)
Gz[[j]] <- Gzcomp(object$group.stats[[j]],
numdir = numdir, span = span) / sqrt(pw)
}
}
return(Gz)
}
#' @method summary pire
#' @noRd
summary.pire <- function (object, ...) {
# Initialize output with the original call
ans <- object[c("call")]
result <- object$result
numdir <- length(result)
tests <- object$indep.test
# Combine test statistics across dimensions
for (d in 1:numdir) {
tests <- rbind(tests, result[[d]]$summary)
}
# Assign test names
rownames(tests) <- paste(0:numdir, "D vs", " > ", 0:numdir, "D", sep = "")
ans$method <- object$method
# Initialize containers for group-wise. metadata
ans$nslices <- ans.sizes <- NULL
ans$n <-NULL
# Gather number of cases, slice counts and sizes from each group
for (stats in object$group.stats) {
ans$n <- c(ans$n, stats$n)
ans$nslices <- c(ans$nslices, stats$slice.info$nslices)
ans$sizes <- c(ans$sizes, stats$slice.info$slice.sizes)
}
# Attach per-direction basis estimates
ans$result <- object$result
for (j in 1:length(ans$result)) {
ans$result[[j]]$B <- dr.basis(object, j)
}
ans$weights <- dr.wts(object)
ans$test <- tests
# Assign class (same as IRE summary for consistency)
class(ans) <- "summary.ire"
return(ans)
}
x <- matrix(rnorm(500), 100, 5)
dim(x)
y <- x[, 1] + x[, 2] + rnorm(100)
dr(y ~ x)
devtools::document()
rm(list = c("cosangle", "dr.basis", "dr.coordinate.test", "dr.evalues",
"dr.fit", "dr.indep.test.phdres", "dr.iteration", "dr.joint.test", "dr.M",
"dr.permutation.test", "dr.permutation.test.statistic", "dr.Q", "dr.R", "dr.slices",
"dr.slices.arc", "dr.step", "dr.test", "dr.test2.phdres", "dr.weights", "dr.y",
"Gzcomp"))
devtools::document()
devtools::check()
