yt[[l]] <- y[index]
xt[[l]] <- x[index, ]
}
for (k in 1:length(tau)) {
beta_hat_CPQS <- as.null()
for (l in 1:m[M]) {
beta_hat_CPQS <- cbind(beta_hat_CPQS, cqs(xt[[l]], yt[[l]], tau = tau[k], dtau = dtau)$qvectors[, 1:dtau])
}
b_CPQS <- beta_hat_CPQS
B_CPQS <- tcrossprod(b_CPQS, b_CPQS)
out_CPQS <- eigen(B_CPQS)
beta_final_CPQS <- out_CPQS$vectors[, 1:dtau]
beta_final_CPQS <- 3 * beta_final_CPQS / beta_final_CPQS[1]
# estimation error
est_error[j, k, M] <- (pracma::subspace(beta, beta_final)) / (pi / 2)
}
for (k in 1:length(tau)) {
beta_hat_CPQS <- as.null()
for (l in 1:m[M]) {
beta_hat_CPQS <- cbind(beta_hat_CPQS, cqs(xt[[l]], yt[[l]], tau = tau[k], dtau = dtau)$qvectors[, 1:dtau])
}
b_CPQS <- beta_hat_CPQS
B_CPQS <- tcrossprod(b_CPQS, b_CPQS)
out_CPQS <- eigen(B_CPQS)
beta_final_CPQS <- out_CPQS$vectors[, 1:dtau]
beta_final_CPQS <- 3 * beta_final_CPQS / beta_final_CPQS[1]
# estimation error
est_error[j, k, M] <- (pracma::subspace(beta, beta_final_CPQS)) / (pi / 2)
}
est_error[j, , M]
beta
beta_final_CPQS
apply(est_error, c(2,3), mean)
m
plot(m, means_errors[3, ])
means_errors <- apply(est_error, c(2, 3), mean)
sds_errors <- apply(est_error, c(2, 3), sd)
plot(m, means_errors[3, ])
means_errors <- apply(est_error, c(2, 3), mean)
sds_errors <- apply(est_error, c(2, 3), sd)
plot(m, means_errors[3, ], type = 'l')
nsimu <- 100
m <- seq(5, 30, by = 5)
n <- 200
p <- 10
tau <- c(0.1, 0.25, 0.5, 0.75, 0.9)
beta <- c(3, 1.5, 0, 0, 2, rep(0, p - 5))
dtau <- 1
K <- function(s, t) exp(-0.5 * abs(s - t))
est_error <- array(0, c(nsimu, length(tau), length(m)))
for (M in 1:length(m)) {
set.seed(1234)
for (j in 1:nsimu){
x <- matrix(0, n * m[M], p)
error <- rep(0, n * m[M])
t_time <- c(1:m[M])
alpha <- sin(2 * pi * t_time / 30)
for (s in 1:n) {
for (t in 1:p) {
x[((s - 1) * m[M] + 1):(s * m[M]), t] <- gaussprocess(1, m[M], K, m = m[M])$xt
}
}
for (s in 1:n) {
error[((s - 1) * m[M] + 1):(s * m[M])] <- gaussprocess(1, m[M], K, m = m[M])$xt
}
y <- alpha + x %*% beta + error
yt <- list()
xt <- list()
for (l in 1:m[M]) {
if (l != m[M]) {
index <- (1:(n * m[M]) %% m[M]) == l
} else {
index <- (1:(n * m[M]) %% m[M]) == 0
}
yt[[l]] <- y[index]
xt[[l]] <- x[index, ]
}
for (k in 1:length(tau)) {
beta_hat_CPQS <- as.null()
for (l in 1:m[M]) {
beta_hat_CPQS <- cbind(beta_hat_CPQS, cqs(xt[[l]], yt[[l]], tau = tau[k], dtau = dtau)$qvectors[, 1:dtau])
}
b_CPQS <- beta_hat_CPQS
B_CPQS <- tcrossprod(b_CPQS, b_CPQS)
out_CPQS <- eigen(B_CPQS)
beta_final_CPQS <- out_CPQS$vectors[, 1:dtau]
beta_final_CPQS <- 3 * beta_final_CPQS / beta_final_CPQS[1]
# estimation error
est_error[j, k, M] <- (pracma::subspace(beta, beta_final_CPQS)) / (pi / 2)
}
}
}
means_errors <- apply(est_error, c(2, 3), mean)
sds_errors <- apply(est_error, c(2, 3), sd)
plot(m, means_errors[3, ], type = 'l')
par(mfrow=c(2, 3))
for (i in 1:length(taus)) {
plot(m, means_errors[i, ], type = 'l')
}
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l')
}
means_errors <- apply(est_error, c(2, 3), mean)
sds_errors <- apply(est_error, c(2, 3), sd)
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error')
}
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = expression(paste(tau, tau[i])))
}
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = expression(paste(tau), tau[i]))
}
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
means_errors
sds_errors
setwd("~/Desktop")
pdf(paste('Ex4_ModelI.pdf'), width = 9, height = 7.5)
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
pdf(paste('Ex4_ModelI.pdf'), width = 9, height = 6)
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
pdf(paste('Ex4_ModelI.pdf'), width = 9, height = 6.5)
par(mfrow=c(2, 3))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
layout(matrix(c(1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 0), 2, 6))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
pdf(paste('Ex4_ModelI.pdf'), width = 9, height = 6.5)
layout(matrix(c(1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 0), 2, 6))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
pdf(paste('Ex4_ModelI_long.pdf'), width = 9, height = 6.5)
layout(matrix(c(1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 0), 2, 6))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
layout(matrix(c(1, 0, 1, 4, 2, 4, 2, 5, 3, 5, 3, 0), 2, 6))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
pdf(paste('Ex4_ModelI_long.pdf'), width = 9, height = 6.5)
layout(matrix(c(1, 0, 1, 4, 2, 4, 2, 5, 3, 5, 3, 0), 2, 6))
for (i in 1:length(tau)) {
plot(m, means_errors[i, ], type = 'l', ylab = 'mean estimation error', main = tau[i])
}
dev.off()
library(cranlogs)
cran_downloads(packages="quantdr", when="last-week")
cran_downloads(packages="quantdr", when="last-week")
cran_downloads(packages="quantdr", when="last-day")
cran_downloads(packages="quantdr", when="last-week")
cran_downloads(packages="quantdr", when="last-week")
cran_downloads(packages="quantdr", when="last-week")
6+11+25
(70-65)/sqrt(15/35)
(67-65)/sqrt(15/35)
(60-65)/sqrt(15/35)
(66-65)/sqrt(15/35)
1-0.9370
-1.645*sqrt(15/35) + 65
3/sqrt(27/35)
2/sqrt(27/35)
1-0.9887
library(quantdr)
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
set.seed(1234)
n <- 100
p <- 10
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
tau <- 0.5
out <- cqs(x, y, tau, dtau = 1)
out
# without specifying dtau
out <- cqs(x, y, tau)
out
out$qvectors[, 1:out$dtau]
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y), xlab = 'sufficient direction') + geom_point() +
geom_point(aes(x = dir1, qhat), colour = 'red') +
facet_wrap(~quantiles, ncol = 3)
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point() +
geom_point(aes(x = dir1, qhat), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point(size = 3) +
geom_point(aes(x = dir1, qhat), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point(size = 3) +
geom_point(aes(x = dir1, qhat, size = 3), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point(size = 1) +
geom_point(aes(x = dir1, qhat, size = 1), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point(size = 3) +
geom_point(aes(x = dir1, qhat), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
library(quantdr)
## basic example code - a homoscedastic single-index model
# Setting
set.seed(1234)
n <- 100
p <- 10
taus <- c(0.1, 0.25, 0.5, 0.75, 0.9)
x <- matrix(rnorm(n * p), n, p)
error <- rnorm(n)
y <- 3 * x[, 1] + x[, 2] + error
# true direction that spans each central quantile subspace
beta_true <- c(3, 1, rep(0, p - 2))
beta_true / sqrt(sum(beta_true^2))
# sufficient direction
dir1 <- x %*% beta_true
# Estimate the directions of each central quantile subspace
# Since dtau is known to be one, the algorithm will produce only one vector
out <- matrix(0, p, length(taus))
for (i in 1:length(taus)) {
out[, i] <- cqs(x, y, tau = taus[i], dtau = 1)$qvectors
}
out
# compare each estimated direction with the true one using the angle between the two subspaces
library(pracma)
for (i in 1:length(taus)) {
print(subspace(out[, i], beta_true) / (pi / 2)) # the angle is measured in radians, so divide by pi/2
}
# Estimate and plot the conditional quantile function using the new sufficient predictors
library(ggplot2)
newx <- x %*% out
qhat <- as.null()
for (i in 1:length(taus)) {
qhat <- c(qhat, llqr(newx[, i], y, tau = taus[i])$ll_est)
}
data1 <- data.frame(rep(dir1, n), rep(y, n), c(newx), rep(taus, each = n), qhat)
names(data1) <- c("dir1", "y", "newx", "quantiles", 'qhat')
ggplot(data1, aes(x = dir1, y = y)) + geom_point() +
geom_point(aes(x = dir1, qhat), colour = 'red') +
facet_wrap(~quantiles, ncol = 3) + xlab('sufficient direction')
devtools::document()
devtools::load_all(".")
devtools::release()
spell_check()
library(devtools)
spell_check()
devtools::release()
check_rhub()
devtools::release()
check_win_devel()
devtools::release()
devtools::document()
devtools::load_all(".")
devtools::release()
check_rhub()
library(devtools)
check_rhub()
devtools::release()
check_win_devel()
devtools::release()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
# Example 1
# estimate the function at a specific quantile level for simulated data
set.seed(1234)
n <- 100
x <- rnorm(n)
error <- rnorm(n)
y <- (x + 1)^3 + 0.1 * (x - 2)^3 + error
tau <- 0.5
plot(x, y, main = tau)
points(x, llqr(x, y, tau = tau)$ll_est, col = 'red', pch = 16)
llqr(x, y, tau = tau)
