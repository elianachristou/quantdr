% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/llqr.R
\name{llqr}
\alias{llqr}
\alias{llqrcv}
\title{Local linear conditional quantile estimation}
\usage{
llqr(x, y, tau = 0.5, h, method = "rule", x0)

llqrcv(x, y, tau = 0.5)
}
\arguments{
\item{x}{a design matrix.The rows represent observations and the columns
represent predictor variables}

\item{y}{a vector of the respons variable}

\item{tau}{the quantile level, a number strictly between 0 and 1.}

\item{h}{A univariate bandwidth.}

\item{method}{A method to select the bandwidth, if it is missing. There are
two methods considered: the rule-of-thumb bandwidth of Yu and Jones (1994)
and the cross-validation criterion.}

\item{x0}{A single observation for which to perform the estimation. It needs
to be a singular value, for a univariate predictor, or a vector, for a
multivariate predictor. If \code{x0} is missing, the estimation will be
performed on the entire design matrix \code{x}.}
}
\value{
\code{llqr} returns the local linear \code{tau}-th conditional
  quantile estimator of \code{y} given \code{x}, along with the bandwidth
  used.

\code{llqrcv} returns the optimal bandwidth selected using
  Cross-Validation criterion for the estimation of the \code{tau}-th
  conditional quantile of \code{y} given \code{x}.
}
\description{
\code{llqr} estimates the \code{tau}-th conditional quantile of \code{y}
given \code{x} based on a local linear estimation. The estimation is
performed either at a point x0, if specified, or at the entire design matrix
x.
}
\details{
The local linear estimation of the \code{tau}-th conditional quantile
estimator requires a kernel and a bandwidth.  This function uses the normal
kernel and it allows the bandwidth to be given by the user, or estimated
using either the rule-of-thumb bandwidth of Yu and Jones (1994) or the
Cross-Validation criterion. \eqn{a+b}
}
\section{Functions}{
\itemize{
\item \code{llqrcv}: Cross-Validation for bandwidth selection for local linear
conditional quantile estimation
}}

\examples{
n <- 100
x <- rnorm(100); error <- rnorm(100); y <- x^2 + error
tau <- c(0.25, 0.5, 0.75)
par(mfrow=c(2,2))
for (i in 1:length(tau)) {
  plot(x, y, main=print(tau[i]))
  points(x, llqr(x, y, tau=tau[i])$ll_est, pch=16, col='red')
}

\dontrun{
n <- 100
x <- cbind(rnorm(n), rnorm(n)); error <- rnorm(100); y <- x[, 1]^2 + error
x0=1
tau=0.5
llqr(x, y, tau=tau, x0=x0)$ll_est
}
n <- 100
x <- rnorm(100); error <- rnorm(100); y <- x^2 + error
tau <- 0.5
llqrcv(x, y, tau = tau)
}
